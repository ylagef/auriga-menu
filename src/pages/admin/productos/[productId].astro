---
import Admin from '@components/Admin.astro'
import Button from '@components/Button'
import ButtonLink from '@components/ButtonLink.astro'
import ButtonLinksContainer from '@components/ButtonLinksContainer.astro'
import CategoryForm from '@components/CategoryForm'
import CreateSection from '@components/CreateSection'
import Divider from '@components/Divider.astro'
import { Input } from '@components/Input'
import LineCard from '@components/Linecard'
import ProductForm from '@components/ProductForm'
import { CATEGORY_TYPES, MenuSI, ProductSI, SectionSI } from 'src/typesSupabase'
import {
  getCategories,
  getCategoryBySlug,
  getMenuByCategory,
  getProductById,
  getProductsByCategory,
  getProductsBySection,
  getSectionsByCategory,
  getZones,
  supabase
} from 'src/utils/supabase'

const cookies = Astro.request.headers.get('cookie')

const token = cookies
  ?.split(';')
  .find((c) => c.trim().startsWith('sup-access-token='))
  ?.split('=')[1]

if (!token) return Astro.redirect('/admin/login')

const { data: user } = await supabase.auth.api.getUser(token)

if (user?.aud !== 'authenticated') return Astro.redirect('/admin/login')

const { productId } = Astro.params

const product = await getProductById({ productId: Number(productId) })
const products = await getProductsByCategory({ categoryId: product.categoryId })
console.log({ product })
---

<Admin user={user}>
  <div class="flex flex-col gap-6">
    <div class="flex flex-col">
      <h1>{product.name}</h1>
    </div>

    <LineCard client:visible label="Datos categoría">
      <ProductForm client:visible product={product} products={products} />

      <!-- <LineCard client:visible label={categoryTitle}>
        {
          categoryType === CATEGORY_TYPES.PRODUCTS && (
            <div class="flex items-center justify-center">
              {products.length === 0 && <span class="text-gray-600">Aún no hay productos</span>}

              <ButtonLinksContainer>
                {products
                  ?.sort((a, b) => a.name.localeCompare(b.name))
                  .map((product) => (
                    <ButtonLink href={`/admin/productos/${product.id}`}>{product.name}</ButtonLink>
                  ))}
              </ButtonLinksContainer>
            </div>
          )
        }

        {
          categoryType === CATEGORY_TYPES.SECTIONS && (
            <div class="flex flex-col items-center justify-center">
              {sections.length === 0 && <span class="text-gray-600">Aún no hay secciones</span>}

              {sections
                ?.sort((a, b) => a.title.localeCompare(b.title))
                .map((section) => (
                  <div class="flex flex-col gap-4 items-center p-2 w-full">
                    <div class="flex justify-between items-center w-full">
                      <h2>{section.title}</h2>
                      <Button href={`/admin/secciones/${section.id}`}>Editar</Button>
                    </div>
                    <LineCard label="Productos">
                      {section.products.length === 0 && <span class="text-gray-600">Aún no hay productos</span>}
                      {section.products
                        ?.sort((a, b) => a.name.localeCompare(b.name))
                        .map((product) => (
                          <ButtonLink href={`/admin/categories/${product.id}`}>{product.name}</ButtonLink>
                        ))}
                    </LineCard>
                  </div>
                ))}
            </div>
          )
        }
      </LineCard>

      <LineCard client:visible label={createTitle}>
        {categoryType === CATEGORY_TYPES.SECTIONS && <CreateSection client:visible category={category} sections={sections} />}
        {categoryType === CATEGORY_TYPES.PRODUCTS && <ProductForm client:visible category={category} products={products} />}
      </LineCard> -->
    </LineCard>
  </div>
</Admin>
