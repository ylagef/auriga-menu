---
import Admin from '@components/Admin.astro'
import CoursesCardList from '@components/admin/CoursesCardList.astro'
import DetailSummaryContainer from '@components/admin/DetailSummaryContainer'
import LineCard from '@components/admin/LineCard'
import ProductsCardList from '@components/admin/ProductsCardList.astro'
import SectionsCardList from '@components/admin/SectionsCardList.astro'
import CategoryForm from '@components/CategoryForm'
import CourseForm from '@components/CourseForm'
import ProductForm from '@components/ProductForm'
import SectionForm from '@components/SectionForm'
import { CATEGORY_TYPES, CourseSI, ProductSI, SectionSI } from 'src/types'
import { getCategoryBySlug, getCoursesByCategory, getProductsByCategory, getSectionsByCategory, supabase } from 'src/utils/supabase'

const cookies = Astro.request.headers.get('cookie')

const token = cookies
  ?.split(';')
  .find((c) => c.trim().startsWith('sup-access-token='))
  ?.split('=')[1]

if (!token) return Astro.redirect('/admin/login')

const { data: user } = await supabase.auth.api.getUser(token)

if (user?.aud !== 'authenticated') return Astro.redirect('/admin/login')

let { categorySlug } = Astro.params
categorySlug = categorySlug as string

const category = await getCategoryBySlug({ categorySlug })
const categoryType = category?.type

let createTitle
switch (categoryType) {
  case CATEGORY_TYPES.SECTIONS:
    createTitle = 'Nueva sección'
    break
  case CATEGORY_TYPES.PRODUCTS:
    createTitle = 'Nuevo producto'
    break
  case CATEGORY_TYPES.MENU:
    createTitle = 'Nuevo plato'
    break
}

let courses: CourseSI[], products: ProductSI[], sections: SectionSI[]
switch (categoryType) {
  case CATEGORY_TYPES.MENU:
    courses = await getCoursesByCategory({ categoryId: category?.id })
    break
  case CATEGORY_TYPES.PRODUCTS:
    products = await getProductsByCategory({ categoryId: category?.id })
    break
  case CATEGORY_TYPES.SECTIONS:
    sections = await getSectionsByCategory({ categoryId: category?.id })
    break
}

const isMenu = categoryType === CATEGORY_TYPES.MENU
const isProducts = categoryType === CATEGORY_TYPES.PRODUCTS
const isSections = categoryType === CATEGORY_TYPES.SECTIONS

const typeCanBeUpdated = courses?.length === 0 || products?.length === 0 || sections?.length === 0
---

<Admin user={user}>
  <div class="flex flex-col gap-6">
    <DetailSummaryContainer title="Categoría">
      <h3>{category.buttonText}</h3>
      <h4>{category.categoryTitle}</h4>
      {category.price && <h4>{category.price}€</h4>}
    </DetailSummaryContainer>

    <LineCard client:visible label="Datos categoría">
      <CategoryForm client:visible category={category} sections={sections} typeCanBeUpdated={typeCanBeUpdated} />
    </LineCard>

    {isMenu && <CoursesCardList courses={courses} />}
    {isProducts && <ProductsCardList products={products} />}
    {isSections && <SectionsCardList sections={sections} />}

    <LineCard client:visible label={createTitle}>
      {isMenu && <CourseForm client:visible category={category} />}
      {isSections && <SectionForm client:visible category={category} sections={sections} />}
      {isProducts && <ProductForm client:visible category={category} />}
    </LineCard>
  </div>
</Admin>
