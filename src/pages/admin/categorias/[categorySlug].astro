---
import Admin from '@components/Admin.astro'
import Button from '@components/admin/Button'
import DetailSummaryContainer from '@components/admin/DetailSummaryContainer'
import LineCard from '@components/admin/LineCard'
import ButtonLink from '@components/ButtonLink.astro'
import ButtonLinksContainer from '@components/ButtonLinksContainer.astro'
import CategoryForm from '@components/CategoryForm'
import CourseForm from '@components/CourseForm'
import ProductForm from '@components/ProductForm'
import SectionForm from '@components/SectionForm'
import { CATEGORY_TYPES, MenuSI, ProductSI, SectionSI } from 'src/types'
import { getCategoryBySlug, getMenuByCategory, getProductsByCategory, getSectionsByCategory, supabase } from 'src/utils/supabase'

const cookies = Astro.request.headers.get('cookie')

const token = cookies
  ?.split(';')
  .find((c) => c.trim().startsWith('sup-access-token='))
  ?.split('=')[1]

if (!token) return Astro.redirect('/admin/login')

const { data: user } = await supabase.auth.api.getUser(token)

if (user?.aud !== 'authenticated') return Astro.redirect('/admin/login')

let { categorySlug } = Astro.params
categorySlug = categorySlug as string

const category = await getCategoryBySlug({ categorySlug })
const categoryType = category?.type
const categoryTitle = categoryType === CATEGORY_TYPES.MENU ? 'Platos' : categoryType === CATEGORY_TYPES.SECTIONS ? 'Secciones' : 'Productos'
let createTitle
switch (categoryType) {
  case CATEGORY_TYPES.SECTIONS:
    createTitle = 'Añadir nueva sección'
    break
  case CATEGORY_TYPES.PRODUCTS:
    createTitle = 'Añadir nuevo producto'
    break
  case CATEGORY_TYPES.MENU:
    createTitle = 'Añadir nuevo plato'
    break
}

let menu: MenuSI, products: ProductSI[], sections: SectionSI[]
switch (categoryType) {
  case CATEGORY_TYPES.MENU:
    menu = await getMenuByCategory({ categoryId: category?.id })
    break
  case CATEGORY_TYPES.PRODUCTS:
    products = await getProductsByCategory({ categoryId: category?.id })
    break
  case CATEGORY_TYPES.SECTIONS:
    sections = await getSectionsByCategory({ categoryId: category?.id })
    break
}
---

<Admin user={user}>
  <div class="flex flex-col gap-6">
    <DetailSummaryContainer title="Categoría">
      <h3>{category.buttonText}</h3>
      <h4>{category.categoryTitle}</h4>
    </DetailSummaryContainer>

    <LineCard client:visible label="Datos categoría">
      <CategoryForm client:visible category={category} />
    </LineCard>

    <LineCard client:visible label={categoryTitle}>
      {
        categoryType === CATEGORY_TYPES.MENU && (
          <div class="flex flex-col items-center justify-center w-full">
            {menu?.courses?.length === 0 && <span class="text-gray-600">Aún no hay platos</span>}

            {menu?.courses
              ?.sort((a, z) => a.order - z.order)
              ?.map((course) => (
                <div class="flex flex-col gap-4 items-center p-2 w-full">
                  <div class="flex justify-between items-center w-full">
                    <h2>{course.name}</h2>
                    <Button href={`/admin/platos/${course.id}`}>Editar</Button>
                  </div>
                  <LineCard label="Opciones">
                    {course.products?.length === 0 && <span class="text-gray-600">Aún no hay productos</span>}
                    {course.products
                      ?.sort((a, z) => a.localeCompare(z))
                      ?.map((product) => (
                        <p>- {product}</p>
                      ))}
                  </LineCard>
                </div>
              ))}
          </div>
        )
      }

      {
        categoryType === CATEGORY_TYPES.PRODUCTS && (
          <div class="flex items-center justify-center">
            {products.length === 0 && <span class="text-gray-600">Aún no hay productos</span>}

            <ButtonLinksContainer>
              {products
                ?.sort((a, b) => a.name.localeCompare(b.name))
                .map((product) => (
                  <ButtonLink href={`/admin/productos/${product.id}`}>{product.name}</ButtonLink>
                ))}
            </ButtonLinksContainer>
          </div>
        )
      }

      {
        categoryType === CATEGORY_TYPES.SECTIONS && (
          <div class="flex flex-col items-center justify-center">
            {sections.length === 0 && <span class="text-gray-600">Aún no hay secciones</span>}

            {sections
              ?.sort((a, b) => a.title.localeCompare(b.title))
              .map((section) => (
                <div class="flex flex-col gap-4 items-center p-2 w-full">
                  <div class="flex justify-between items-center w-full">
                    <h2>{section.title}</h2>
                    <Button href={`/admin/secciones/${section.id}`}>Editar</Button>
                  </div>
                  <LineCard label="Productos">
                    {section.products.length === 0 && <span class="text-gray-600">Aún no hay productos</span>}
                    {section.products
                      ?.sort((a, b) => a.name.localeCompare(b.name))
                      .map((product) => (
                        <ButtonLink href={`/admin/productos/${product.id}`}>{product.name}</ButtonLink>
                      ))}
                  </LineCard>
                </div>
              ))}
          </div>
        )
      }
    </LineCard>

    <LineCard client:visible label={createTitle}>
      {categoryType === CATEGORY_TYPES.MENU && <CourseForm client:visible menu={menu} />}
      {categoryType === CATEGORY_TYPES.SECTIONS && <SectionForm client:visible category={category} sections={sections} />}
      {categoryType === CATEGORY_TYPES.PRODUCTS && <ProductForm client:visible category={category} products={products} />}
    </LineCard>
  </div>
</Admin>
